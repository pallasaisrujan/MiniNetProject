name: Setup Infrastructure

on:
  push:

env:
  PROJECT_ID: mini-net-428116
  REGION: us-central1
  ZONE: us-central1-a
  SQL_INSTANCE_NAME: mininet-sql-instance
  DB_NAME: mininet-db
  SQL_USERNAME: Birkbeck13924706
  SQL_PASSWORD: Birkbeck@13924706

jobs:
  setup-sql:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        id: auth-gcp
        uses: google-github-actions/auth@v0
        with:
          credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}'

      - name: Configure gcloud
        run: |
          gcloud config set project ${{ env.PROJECT_ID }}
          gcloud config set compute/zone ${{ env.ZONE }}

      - name: Enable Cloud SQL Admin API
        run: |
          gcloud services enable sqladmin.googleapis.com

      - name: Enable Compute Engine API
        run: |
          gcloud services enable compute.googleapis.com

      - name: Enable Cloud Resource Manager API
        run: |
          gcloud services enable cloudresourcemanager.googleapis.com

      - name: Wait for API activation
        run: |
          sleep 60  # Wait for 60 seconds to allow the API activation to propagate

      - name: Check if SQL instance exists
        id: sql-instance-check
        run: |
          if gcloud sql instances describe ${{ env.SQL_INSTANCE_NAME }}; then
            echo "SQL instance already exists"
            echo "::set-output name=exists::true"
          else
            echo "SQL instance does not exist"
            echo "::set-output name=exists::false"
          fi

      - name: Create SQL instance
        if: steps.sql-instance-check.outputs.exists == 'false'
        run: |
          gcloud sql instances create ${{ env.SQL_INSTANCE_NAME }} \
            --database-version=MYSQL_8_0 \
            --tier=db-f1-micro \
            --region=${{ env.REGION }} \
            --root-password=root

      - name: Wait for SQL instance to be RUNNABLE
        run: |
          while [[ $(gcloud sql instances describe ${{ env.SQL_INSTANCE_NAME }} --format="value(state)") != "RUNNABLE" ]]; do
            echo "Waiting for SQL instance to be RUNNABLE..."
            sleep 10
          done
          echo "SQL instance is RUNNABLE."

      - name: Create SQL user
        run: |
          gcloud sql users create ${{ env.SQL_USERNAME }} --instance=${{ env.SQL_INSTANCE_NAME }} --password=${{ env.SQL_PASSWORD }}

      - name: Check if database exists
        id: db-check
        run: |
          if gcloud sql databases describe ${{ env.DB_NAME }} --instance=${{ env.SQL_INSTANCE_NAME }}; then
            echo "Database already exists"
            echo "::set-output name=exists::true"
          else
            echo "Database does not exist"
            echo "::set-output name=exists::false"
          fi

      - name: Create SQL database
        if: steps.db-check.outputs.exists == 'false'
        run: |
          gcloud sql databases create ${{ env.DB_NAME }} --instance=${{ env.SQL_INSTANCE_NAME }}

  setup-cassandra:
    runs-on: ubuntu-latest

    services:
      cassandra:
        image: cassandra:latest
        ports:
          - 9042:9042

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Stop existing Cassandra containers
        run: |
          docker ps -q --filter ancestor=cassandra | xargs -r docker stop | xargs -r docker rm

      - name: Set up Docker Compose
        run: |
          docker-compose -f docker-compose.yml up -d

      - name: Wait for Cassandra to be ready
        run: |
          echo "Waiting for Cassandra to be ready..."
          for i in {1..30}; do
            if nc -z localhost 9042; then
              echo "Cassandra is ready!"
              exit 0
            fi
            echo "Waiting for Cassandra to be ready... ($i/30)"
            sleep 10
          done
          echo "Cassandra did not become ready in time."
          exit 1

      - name: Install Cassandra driver
        run: |
          pip install cassandra-driver

      - name: Verify Cassandra Connection
        run: |
          python -c "
          from cassandra.cluster import Cluster
          cluster = Cluster(['localhost'])
          session = cluster.connect()
          print('Connected to Cassandra')
          "
