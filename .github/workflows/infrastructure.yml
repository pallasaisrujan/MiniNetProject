name: Setup Infrastructure and Deploy Cassandra

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: mini-net-428116
  REGION: us-central1
  ZONE: us-central1-a
  SQL_INSTANCE_NAME: mininet-sql-instance
  DB_NAME: mininet-db
  SQL_USERNAME: Birkbeck13924706
  SQL_PASSWORD: Birkbeck@13924706
  CLUSTER_NAME: cassandra-cluster

jobs:
  setup-infrastructure:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        id: auth-gcp
        uses: google-github-actions/auth@v0
        with:
          credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: 'gke-gcloud-auth-plugin'

      - name: Configure gcloud
        run: |
          gcloud config set compute/zone ${{ env.ZONE }}

      - name: Enable required APIs
        run: |
          gcloud services enable sqladmin.googleapis.com compute.googleapis.com cloudresourcemanager.googleapis.com container.googleapis.com

      - name: Wait for API activation
        run: sleep 60

      - name: Check if SQL instance exists
        id: sql-instance-check
        run: |
          if gcloud sql instances describe ${{ env.SQL_INSTANCE_NAME }}; then
            echo "SQL instance already exists"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "SQL instance does not exist"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create SQL instance
        if: steps.sql-instance-check.outputs.exists == 'false'
        run: |
          gcloud sql instances create ${{ env.SQL_INSTANCE_NAME }} \
            --database-version=MYSQL_8_0 \
            --tier=db-f1-micro \
            --region=${{ env.REGION }} \
            --root-password=root

      - name: Wait for SQL instance to be RUNNABLE
        run: |
          while [[ $(gcloud sql instances describe ${{ env.SQL_INSTANCE_NAME }} --format="value(state)") != "RUNNABLE" ]]; do
            echo "Waiting for SQL instance to be RUNNABLE..."
            sleep 10
          done
          echo "SQL instance is RUNNABLE."

      - name: Create SQL user
        run: |
          gcloud sql users create ${{ env.SQL_USERNAME }} --instance=${{ env.SQL_INSTANCE_NAME }} --password=${{ env.SQL_PASSWORD }}

      - name: Check if database exists
        id: db-check
        run: |
          if gcloud sql databases describe ${{ env.DB_NAME }} --instance=${{ env.SQL_INSTANCE_NAME }}; then
            echo "Database already exists"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Database does not exist"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create SQL database
        if: steps.db-check.outputs.exists == 'false'
        run: |
          gcloud sql databases create ${{ env.DB_NAME }} --instance=${{ env.SQL_INSTANCE_NAME }}

      - name: Check if GKE cluster exists
        id: gke-cluster-check
        run: |
          if gcloud container clusters describe ${{ env.CLUSTER_NAME }} --zone ${{ env.ZONE }}; then
            echo "GKE cluster already exists"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "GKE cluster does not exist"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create GKE cluster
        if: steps.gke-cluster-check.outputs.exists == 'false'
        run: |
          gcloud container clusters create ${{ env.CLUSTER_NAME }} \
            --zone ${{ env.ZONE }} \
            --num-nodes 3 \
            --enable-ip-alias

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} --zone ${{ env.ZONE }}

      - name: Create firewall rule for GKE
        run: |
          gcloud compute firewall-rules create allow-all-to-gke \
            --direction=INGRESS \
            --priority=1000 \
            --network=default \
            --action=ALLOW \
            --rules=tcp:9042 \
            --source-ranges=0.0.0.0/0 \
            --target-tags=gke-${{ env.CLUSTER_NAME }}-node

      - name: Deploy Cassandra to GKE
        run: |
          kubectl apply -f kubernetes/cassandra-deployment.yml

      - name: Wait for Cassandra to be ready
        run: |
          kubectl wait --for=condition=ready pod -l app=cassandra --timeout=600s

      - name: Get Cassandra external IP
        run: |
          external_ip=""
          while [ -z $external_ip ]; do
            echo "Waiting for external IP..."
            external_ip=$(kubectl get svc cassandra --template="{{range .status.loadBalancer.ingress}}{{.ip}}{{end}}")
            [ -z "$external_ip" ] && sleep 10
          done
          echo "Cassandra is externally available at $external_ip:9042"