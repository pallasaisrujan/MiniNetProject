name: Setup Infrastructure and Deploy Cassandra

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: mini-net-428116
  REGION: us-central1
  ZONE: us-central1-a
  SQL_INSTANCE_NAME: mininet-sql-instance
  DB_NAME: mininet-db
  SQL_USERNAME: Birkbeck13924706
  SQL_PASSWORD: Birkbeck@13924706
  VM_NAME: cassandra-vm
  FIREWALL_RULE: allow-http-https

jobs:
  setup-sql:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        id: auth-gcp
        uses: google-github-actions/auth@v0
        with:
          credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}'

      - name: Configure gcloud
        run: |
          gcloud config set project ${{ env.PROJECT_ID }}
          gcloud config set compute/zone ${{ env.ZONE }}

      - name: Enable Cloud SQL Admin API
        run: |
          gcloud services enable sqladmin.googleapis.com

      - name: Enable Compute Engine API
        run: |
          gcloud services enable compute.googleapis.com

      - name: Enable Cloud Resource Manager API
        run: |
          gcloud services enable cloudresourcemanager.googleapis.com

      - name: Wait for API activation
        run: sleep 60

      - name: Check if SQL instance exists
        id: sql-instance-check
        run: |
          if gcloud sql instances describe ${{ env.SQL_INSTANCE_NAME }}; then
            echo "SQL instance already exists"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "SQL instance does not exist"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create SQL instance
        if: steps.sql-instance-check.outputs.exists == 'false'
        run: |
          gcloud sql instances create ${{ env.SQL_INSTANCE_NAME }} \
            --database-version=MYSQL_8_0 \
            --tier=db-f1-micro \
            --region=${{ env.REGION }} \
            --root-password=root

      - name: Wait for SQL instance to be RUNNABLE
        run: |
          while [[ $(gcloud sql instances describe ${{ env.SQL_INSTANCE_NAME }} --format="value(state)") != "RUNNABLE" ]]; do
            echo "Waiting for SQL instance to be RUNNABLE..."
            sleep 10
          done
          echo "SQL instance is RUNNABLE."

      - name: Create SQL user
        run: |
          gcloud sql users create ${{ env.SQL_USERNAME }} --instance=${{ env.SQL_INSTANCE_NAME }} --password=${{ env.SQL_PASSWORD }}

      - name: Check if database exists
        id: db-check
        run: |
          if gcloud sql databases describe ${{ env.DB_NAME }} --instance=${{ env.SQL_INSTANCE_NAME }}; then
            echo "Database already exists"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Database does not exist"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create SQL database
        if: steps.db-check.outputs.exists == 'false'
        run: |
          gcloud sql databases create ${{ env.DB_NAME }} --instance=${{ env.SQL_INSTANCE_NAME }}

  setup-cassandra:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        id: auth-gcp
        uses: google-github-actions/auth@v0
        with:
          credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}'

      - name: Configure gcloud
        run: |
          gcloud config set project ${{ env.PROJECT_ID }}
          gcloud config set compute/zone ${{ env.ZONE }}

      - name: Check if VM exists
        id: vm-check
        run: |
          if gcloud compute instances describe ${{ env.VM_NAME }} --zone=${{ env.ZONE }}; then
            echo "VM already exists"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "VM does not exist"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create VM for Cassandra
        if: steps.vm-check.outputs.exists == 'false'
        run: |
          gcloud compute instances create ${{ env.VM_NAME }} \
            --zone=${{ env.ZONE }} \
            --machine-type=e2-medium \
            --image=ubuntu-2004-focal-v20210720 \
            --image-project=ubuntu-os-cloud \
            --boot-disk-size=50GB \
            --tags=http-server,https-server \
            --metadata startup-script='#! /bin/bash
              sudo apt-get update
              sudo apt-get install -y docker.io
              sudo usermod -aG docker $USER
              sudo systemctl enable docker
              sudo systemctl start docker
              docker run --name CassandraDB-1 -d cassandra:3.11
              sleep 60
              docker run --name CassandraDB-2 -d --link CassandraDB-1:cassandra cassandra:3.11
              sleep 60
              docker run --name CassandraDB-3 -d --link CassandraDB-1:cassandra cassandra:3.11'

      - name: Wait for VM and Docker setup
        run: sleep 180

      - name: Add SSH key to VM
        run: |
          gcloud compute instances add-metadata ${{ env.VM_NAME }} \
            --metadata-from-file ssh-keys=~/.ssh/gcp_key.pub

      - name: Check if firewall rule exists
        id: firewall-rule-check
        run: |
          if gcloud compute firewall-rules describe ${{ env.FIREWALL_RULE }}; then
            echo "Firewall rule already exists"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Firewall rule does not exist"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create firewall rule for VM
        if: steps.firewall-rule-check.outputs.exists == 'false'
        run: |
          gcloud compute firewall-rules create ${{ env.FIREWALL_RULE }} \
            --direction=INGRESS \
            --priority=1000 \
            --network=default \
            --action=ALLOW \
            --rules=tcp:80,tcp:443

      - name: Inspect Cassandra Containers
        run: |
          gcloud compute ssh ${{ env.VM_NAME }} --zone=${{ env.ZONE }} --command="
          docker inspect --format='{{ .NetworkSettings.IPAddress }}' CassandraDB-1 CassandraDB-2 CassandraDB-3
          docker exec -i -t CassandraDB-1 bash -c 'nodetool status'
          docker exec -i -t CassandraDB-2 bash -c 'nodetool status'
          docker exec -i -t CassandraDB-3 bash -c 'nodetool status'"
