name: Setup Infrastructure

on:
  push:

env:
  PROJECT_ID: mini-net-428116
  REGION: us-central1
  ZONE: us-central1-a
  SQL_INSTANCE_NAME: mininet-sql-instance
  DB_NAME: mininet-db
  CASSANDRA_INSTANCE_NAME: mininet-cassandra-instance
  SQL_USERNAME: Birkbeck13924706
  SQL_PASSWORD: Birkbeck@13924706

jobs:
  setup-infrastructure:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        id: auth-gcp
        uses: google-github-actions/auth@v0
        with:
          credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}'

      - name: Configure gcloud
        run: |
          gcloud config set project ${{ env.PROJECT_ID }}
          gcloud config set compute/zone ${{ env.ZONE }}

      - name: Enable Cloud SQL Admin API
        run: |
          gcloud services enable sqladmin.googleapis.com

      - name: Enable Compute Engine API
        run: |
          gcloud services enable compute.googleapis.com

      - name: Enable Bigtable Admin API
        run: |
          gcloud services enable bigtableadmin.googleapis.com

      - name: Wait for API activation
        run: |
          sleep 60  # Wait for 60 seconds to allow the API activation to propagate

      - name: Check if SQL instance exists
        id: sql-instance-check
        run: |
          if gcloud sql instances describe ${{ env.SQL_INSTANCE_NAME }}; then
            echo "SQL instance already exists"
            echo "::set-output name=exists::true"
          else
            echo "SQL instance does not exist"
            echo "::set-output name=exists::false"
          fi

      - name: Create SQL instance
        if: steps.sql-instance-check.outputs.exists == 'false'
        run: |
          gcloud sql instances create ${{ env.SQL_INSTANCE_NAME }} \
            --database-version=MYSQL_8_0 \
            --tier=db-f1-micro \
            --region=${{ env.REGION }} \
            --root-password=${{ env.SQL_PASSWORD }}

      - name: Create SQL user
        run: |
          gcloud sql users create ${{ env.SQL_USERNAME }} --instance=${{ env.SQL_INSTANCE_NAME }} --password=${{ env.SQL_PASSWORD }}

      - name: Check if database exists
        id: db-check
        run: |
          if gcloud sql databases describe ${{ env.DB_NAME }} --instance=${{ env.SQL_INSTANCE_NAME }}; then
            echo "Database already exists"
            echo "::set-output name=exists::true"
          else
            echo "Database does not exist"
            echo "::set-output name=exists::false"
          fi

      - name: Create SQL database
        if: steps.db-check.outputs.exists == 'false'
        run: |
          gcloud sql databases create ${{ env.DB_NAME }} --instance=${{ env.SQL_INSTANCE_NAME }}

      - name: Check if Cassandra (Bigtable) instance exists
        id: cassandra-instance-check
        run: |
          if gcloud bigtable instances describe ${{ env.CASSANDRA_INSTANCE_NAME }}; then
            echo "Cassandra instance already exists"
            echo "::set-output name=exists::true"
          else
            echo "Cassandra instance does not exist"
            echo "::set-output name=exists::false"
          fi

      - name: Create Cassandra (Bigtable) instance
        if: steps.cassandra-instance-check.outputs.exists == 'false'
        run: |
          gcloud bigtable instances create ${{ env.CASSANDRA_INSTANCE_NAME }} \
            --cluster-config=id=cassandra-cluster,zone=${{ env.ZONE }} \
            --display-name="Cassandra Instance" \
            --instance-type=PRODUCTION

      - name: Set Cassandra user and password
        run: |
          gcloud projects add-iam-policy-binding ${{ env.PROJECT_ID }} \
            --member="user:${{ env.SQL_USERNAME }}" \
            --role="roles/bigtable.user"
